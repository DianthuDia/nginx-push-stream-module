--- src/core/ngx_slab.c 2015-02-13 03:08:05.413847661 +0000
+++ src/core/ngx_slab.c 2015-02-13 03:11:11.712888508 +0000
@@ -617,6 +617,24 @@
     return;
 }

+static ngx_slab_page_t *
+ngx_slab_merge_with_neighbour(ngx_slab_pool_t *pool, ngx_slab_page_t *page)
+{
+    ngx_slab_page_t *neighbour = &page[page->slab];
+    if (((ngx_slab_page_t *) neighbour->prev != NULL) && (neighbour->next != NULL) && ((neighbour->prev & NGX_SLAB_PAGE_MASK) == NGX_SLAB_PAGE)) {
+        page->slab += neighbour->slab;
+
+        ((ngx_slab_page_t *) neighbour->prev)->next = neighbour->next;
+        neighbour->next->prev = neighbour->prev;
+
+        neighbour->slab = NGX_SLAB_PAGE_FREE;
+        neighbour->prev = (uintptr_t) &pool->free;
+        neighbour->next = &pool->free;
+
+        return page;
+    }
+    return NULL;
+}

 static ngx_slab_page_t *
 ngx_slab_alloc_pages(ngx_slab_pool_t *pool, ngx_uint_t pages)
@@ -663,6 +681,19 @@
         }
     }

+    ngx_flag_t retry = 0;
+    for (page = pool->free.next; page != &pool->free;) {
+        if (ngx_slab_merge_with_neighbour(pool, page)) {
+            retry = 1;
+        } else {
+            page = page->next;
+        }
+    }
+
+    if (retry) {
+        return ngx_slab_alloc_pages(pool, pages);
+    }
+
     if (pool->log_nomem) {
         ngx_slab_error(pool, NGX_LOG_CRIT,
                        "ngx_slab_alloc() failed: no memory");
@@ -750,6 +781,8 @@
     page->next->prev = (uintptr_t) page;

     pool->free.next = page;
+
+    ngx_slab_merge_with_neighbour(pool, page);
 }
